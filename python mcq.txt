1. What is Python? Mention two of its key features.

Python is a high-level programming language that is easy to read and write.
Two key features:

Simple syntax (looks like English).

Interpreted (you don’t need to compile, just run directly).

Example:

print("Hello Python")


2. How do you write a single-line comment in Python?

Use #.

# This is a single-line comment
print("Hi")


3. How do you write a multi-line comment in Python?

Use triple quotes (''' or """).

'''
This is 
a multi-line 
comment
'''

4. What is the difference between print() and return?

print() → displays the value on screen.

return → sends the value back from a function.

Example:

def add(a, b):
    return a + b   # returns value

result = add(2, 3)
print(result)  # prints 5


5. How do you get user input in Python?

Use input().

name = input("Enter your name: ")
print("Hello", name)

6. How do you check the version of Python installed?

Run this in terminal:

python --version



7. Is Python case-sensitive? Give an example.

Yes, Python is case-sensitive.

a = 10
A = 20
print(a)  # 10
print(A)  # 20

8. How do you run a Python script from the command line?

Save file as myfile.py, then run:

python myfile.py

9. What are keywords in Python? How can you list them?

Keywords are reserved words (like if, else, while).


10. How do you declare a variable in Python?

Just assign value (no need to declare type).

x = 5
name = "Anshika"


11. What’s the difference between = and ==?

= → assignment.

== → comparison.

x = 10     # assignment
print(x == 10)   # True (comparison)


12. How do you swap two variables without using a third variable?
a, b = 5, 10
a, b = b, a
print(a, b)   # 10 5

13. How do you write a one-line if statement?
x = 10
if x > 5: print("Greater than 5")

14. What’s the difference between None and 0 in Python?

None → nothing / no value.

0 → an integer value.

a = None
b = 0
print(a, b)

15. What is indentation in Python and why is it important?

Indentation = spaces at the beginning of code lines.
It defines code blocks in Python (instead of { }).

Example:

if True:
    print("Indented code runs")

16. What are Python’s built-in data types?

Main ones are:

Numeric → int, float, complex

Sequence → list, tuple, range

Text → str

Set → set, frozenset

Mapping → dict

Boolean → bool

None → NoneType

17. How do you check the type of a variable?

Use type().

x = 10
print(type(x))   # <class 'int'>

18. What’s the difference between a list and a tuple?

List → mutable (can change).

Tuple → immutable (cannot change).

lst = [1, 2, 3]
tpl = (1, 2, 3)
lst[0] = 10  # works
# tpl[0] = 10 → error

19. How do you create a dictionary in Python?
student = {"name": "Anshika", "age": 20}
print(student["name"])

20. What’s the difference between append() and extend() for lists?

append() → adds single element.

extend() → adds multiple elements.

a = [1, 2]
a.append([3, 4])   # [1, 2, [3, 4]]
a = [1, 2]
a.extend([3, 4])   # [1, 2, 3, 4]

21. How do you remove an item from a list?

remove(value) → remove by value.

pop(index) → remove by position.

nums = [1, 2, 3]
nums.remove(2)   # [1, 3]
nums.pop(0)      # [3]

22. How do you reverse a list in Python?
nums = [1, 2, 3]
nums.reverse()
print(nums)  # [3, 2, 1]

23. How do you sort a list in ascending order?
nums = [4, 2, 1, 3]
nums.sort()
print(nums)  # [1, 2, 3, 4]

24. What is the difference between shallow copy and deep copy?

Shallow copy → only copies outer list, inner objects still linked.

Deep copy → copies everything separately.

import copy
a = [[1, 2], [3, 4]]
b = copy.copy(a)   # shallow
c = copy.deepcopy(a)  # deep

25. How do you convert a string to lowercase?
text = "HELLO"
print(text.lower())   # hello

26. How do you check if a string starts with a particular word?
s = "Python is fun"
print(s.startswith("Python"))   # True

27. What’s the difference between is and ==?

== → checks values.

is → checks memory location (identity).

a = [1, 2]
b = [1, 2]
print(a == b)   # True
print(a is b)   # False

28. How do you merge two dictionaries in Python 3.9+?
d1 = {"a": 1}
d2 = {"b": 2}
merged = d1 | d2
print(merged)  # {'a': 1, 'b': 2}

29. How do you find the length of a dictionary?
d = {"a": 1, "b": 2}
print(len(d))   # 2

30. How do you create a set?
s = {1, 2, 3}
print(s)

31. What’s the difference between set() and {} in Python?

set() → creates an empty set.

{} → creates an empty dictionary.

a = set()
b = {}
print(type(a))   # set
print(type(b))   # dict

32. How do you find the union of two sets?
a = {1, 2}
b = {2, 3}
print(a | b)   # {1, 2, 3}

33. How do you find the intersection of two sets?
a = {1, 2}
b = {2, 3}
print(a & b)   # {2}

34. What’s the difference between remove() and discard() in sets?

remove() → error if element not present.

discard() → no error if element not present.

s = {1, 2}
s.remove(1)   # works
s.discard(3)  # no error

35. How do you convert a list into a tuple?
lst = [1, 2, 3]
tpl = tuple(lst)
print(tpl)   # (1, 2, 3)

36. How does the if-elif-else structure work in Python?

It checks conditions one by one.

If first is true → run it.

Else check next (elif).

If none are true → run else.

x = 10
if x > 20:
    print("Greater than 20")
elif x > 5:
    print("Greater than 5")
else:
    print("5 or less")

37. What is the difference between for and while loops?

for loop → runs for a fixed range or sequence.

while loop → runs until condition becomes false.

for i in range(3):
    print("For:", i)

x = 0
while x < 3:
    print("While:", x)
    x += 1

38. How do you loop through a dictionary’s keys and values?

Use .items().

student = {"name": "Anshika", "age": 20}
for key, value in student.items():
    print(key, ":", value)

39. How do you break out of a loop?

Use break.

for i in range(5):
    if i == 3:
        break
    print(i)   # 0,1,2

40. How do you skip the current iteration in a loop?

Use continue.

for i in range(5):
    if i == 2:
        continue
    print(i)   # skips 2

41. What is an infinite loop? Give an example.

A loop that never ends.

while True:
    print("This will run forever")


42. How do you use the range() function?

It generates a sequence of numbers.

for i in range(5):
    print(i)   # 0 to 4


43. What’s the difference between range(5) and range(1,5)?

range(5) → 0,1,2,3,4

range(1,5) → 1,2,3,4


44. How do you iterate over both index and value in a list?

Use enumerate().

names = ["A", "B", "C"]
for index, value in enumerate(names):
    print(index, value)


45. How does the else clause work with loops in Python?

The else part runs if loop ends normally (not by break).

for i in range(3):
    print(i)
else:
    print("Loop finished")

46. How do you use a nested loop?

A loop inside another loop.

for i in range(2):
    for j in range(2):
        print(i, j)

47. How do you loop through multiple lists simultaneously?

Use zip().

names = ["A", "B"]
ages = [20, 21]
for n, a in zip(names, ages):
    print(n, a)

48. How do you reverse iterate over a list?

Use reversed().

nums = [1, 2, 3]
for i in reversed(nums):
    print(i)   # 3,2,1

49. What is a list comprehension? Give an example.

A short way to create lists.

nums = [x*x for x in range(5)]
print(nums)   # [0, 1, 4, 9, 16]

50. How do you use a conditional inside a list comprehension?
nums = [x for x in range(10) if x % 2 == 0]
print(nums)   # [0, 2, 4, 6, 8]

51. How do you define a function in Python?

Use def keyword.

def greet():
    print("Hello")
greet()

52. What is the difference between positional and keyword arguments?

Positional → order matters.

Keyword → specify name.

def intro(name, age):
    print(name, age)

intro("Anshika", 20)        # positional  
intro(age=20, name="Anshika")  # keyword

53. What are default parameter values in functions?

If no value is given, use default.

def greet(name="User"):
    print("Hello", name)

greet()         # Hello User
greet("Anshika") # Hello Anshika

54. How do you pass a variable number of arguments to a function?

Use *args (for many values) and **kwargs (for key-value pairs).

def add(*nums):
    print(sum(nums))

add(1, 2, 3)   # 6

55. How do you return multiple values from a function?

Return as tuple.

def calc(a, b):
    return a+b, a-b

x, y = calc(5, 3)
print(x, y)   # 8 2

56. What is a lambda function? Give an example.

A small anonymous function.

square = lambda x: x*x
print(square(4))  # 16

57. What’s the difference between local and global variables?

Local → defined inside function, used only there.

Global → defined outside function, can be used anywhere.

x = 10   # global
def show():
    y = 5  # local
    print(x, y)
show()

58. How do you modify a global variable inside a function?

Use global keyword.

x = 5
def change():
    global x
    x = 10
change()
print(x)  # 10

59. What is recursion in Python? Give an example.

A function calling itself.

Example: factorial

def fact(n):
    if n == 1:
        return 1
    return n * fact(n-1)

print(fact(5))   # 120

60. What is a docstring in Python functions?

A string written inside a function to describe it.

def greet():
    """This function prints a greeting."""
    print("Hello")
print(greet.__doc__)

61. How do you use type hints in functions?

Show expected data types.

def add(a: int, b: int) -> int:
    return a + b

62. What are function annotations?

Extra information about parameters and return type (same as type hints).

def greet(name: str) -> str:
    return "Hello " + name

63. What is the purpose of the pass statement?

Used as a placeholder when code is not ready.

def todo():
    pass   # function will not give error even if empty

64. What is the difference between return and yield in Python?

return → ends the function and sends back a value.

yield → makes the function a generator, it returns values one by one without ending immediately.

Example:

def test_return():
    return 1
    return 2   # never runs

def test_yield():
    yield 1
    yield 2    # works like a sequence

print(list(test_return()))   # Error
print(list(test_yield()))    # [1, 2]

65. What are higher-order functions in Python?

Functions that take other functions as arguments or return them.

Example:

def square(x):
    return x*x

def apply(func, num):
    return func(num)

print(apply(square, 5))   # 25

66. How do you define a class in Python?

Use class keyword.

class Student:
    pass

67. How do you create an object from a class?

Call the class like a function.

class Student:
    def __init__(self, name):
        self.name = name

s1 = Student("Anshika")   # object
print(s1.name)

68. What is __init__ in Python?

It is the constructor (runs automatically when object is created).

class Student:
    def __init__(self, name):
        self.name = name

69. What is the difference between instance variables and class variables?

Instance variable → belongs to each object separately.

Class variable → shared by all objects.

class Student:
    school = "ABC"       # class variable
    def __init__(self, name):
        self.name = name # instance variable

70. What is inheritance in Python?

When a class can use methods/attributes of another class.

class Parent:
    def greet(self):
        print("Hello")

class Child(Parent):
    pass

c = Child()
c.greet()

72. How do you call a parent class constructor?

Use super().

class Parent:
    def __init__(self, name):
        self.name = name

class Child(Parent):
    def __init__(self, name, age):
        super().__init__(name)
        self.age = age

73. What’s the difference between method overloading and overriding?

Overloading → same method name, different parameters (not directly supported in Python).

Overriding → child class changes parent’s method.

class Parent:
    def show(self):
        print("Parent")

class Child(Parent):
    def show(self):
        print("Child")   # overriding

74. What is multiple inheritance?

When a class inherits from more than one class.

class A: pass
class B: pass
class C(A, B): pass

75. What’s the role of super() in Python?

Used to call parent class methods/constructor.

class Parent:
    def greet(self):
        print("Hello")

class Child(Parent):
    def greet(self):
        super().greet()   # call parent
        print("Hi")

76. What are magic methods in Python? Give two examples.

Special methods with __ __ (double underscores).

Examples:

__init__ → constructor

__str__ → string representation

77. What does __str__ do in a class?

Defines how object is shown when printed.

class Student:
    def __str__(self):
        return "This is a Student object"

print(Student())   # calls __str__

78. What is polymorphism in Python?

Same function name used for different types.

print(len("Hello"))   # 5
print(len([1,2,3]))   # 3

79. What is encapsulation in Python?

Hiding internal details and only showing what is needed.
We use private variables with _ or __.

class Student:
    def __init__(self):
        self.__marks = 90  # private

80. What are @staticmethod ?

Methods inside class that do not need self.

class Math:
    @staticmethod
    def add(a, b):
        return a+b

print(Math.add(2,3))

81. How do you make an attribute private in Python?

Use double underscore __.

class Student:
    def __init__(self):
        self.__grade = "A"

82. How do you define a property in a Python class?

Use the @property decorator to create getter methods.

class Student:
    def __init__(self, marks):
        self._marks = marks

    @property
    def marks(self):
        return self._marks

s = Student(90)
print(s.marks)   # 90

83. What is the difference between classmethod and staticmethod?

@classmethod → gets the class itself (cls) as first argument.

@staticmethod → doesn’t need self or cls.

class Test:
    @classmethod
    def cls_method(cls):
        print("Class method")

    @staticmethod
    def static_method():
        print("Static method")

84. How do you check if an object is an instance of a class?

Use isinstance().

class Student: pass
s = Student()
print(isinstance(s, Student))  # True

85. What is operator overloading in Python?

Redefining operators for objects.

class Number:
    def __init__(self, x):
        self.x = x
    def __add__(self, other):
        return self.x + other.x

n1 = Number(5)
n2 = Number(10)
print(n1 + n2)   # 15

86. How do you delete an object in Python?

Use del.

x = 10
del x

87. What is the difference between shallow copy and deep copy in objects?

Shallow copy → only outer object copied.

Deep copy → all nested objects copied too.
(We already saw this for lists in Q24.)

88. What is __del__ method in Python?

It is the destructor, runs when an object is deleted.

class Test:
    def __del__(self):
        print("Object deleted")

t = Test()
del t

93. How do you open a file in Python?

Use open().

f = open("data.txt", "r")  # read mode
print(f.read())
f.close()

94. What are different file modes in Python?

"r" → read

"w" → write (overwrites file)

"a" → append

"b" → binary

"x" → create new

95. How do you read a file line by line?
with open("data.txt", "r") as f:
    for line in f:
        print(line)

96. How do you write into a file in Python?
with open("data.txt", "w") as f:
    f.write("Hello File")